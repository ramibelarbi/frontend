{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = process.env.REACT_APP_API_URL + \"/auth/\";\nclass AuthenticationService {\n  async login(email, password) {\n    console.log(\"1\"); // Log to indicate that login function has been called\n    try {\n      console.log(\"2\"); // Log to indicate that the try block has been entered\n      console.log(\"email: \", email); // Log the value of email\n      console.log(\"password: \", password); // Log the value of password\n      const response = await axios.post(API_URL + \"login\", {\n        email,\n        password\n      });\n      console.log(\"3\"); // Log to indicate that the API request has been sent and we are waiting for response\n      console.log(\"response: \", response); // Log the entire response object\n      console.log(\"response.data: \", response.data); // Log the data received in response\n      if (response.data.token) {\n        console.log(response.data.token); // Log the token if it exists\n        const user = {\n          firstname: response.data.firstname,\n          lastname: response.data.lastname,\n          email: response.data.email,\n          token: response.data.token,\n          role: response.data.role\n        };\n        localStorage.setItem(\"user\", JSON.stringify(user));\n      }\n      console.log(\"4\"); // Log to indicate that the login was successful\n      return response.data;\n    } catch (error) {\n      console.log(\"5\"); // Log to indicate that an error occurred\n      console.log(\"error: \", error); // Log the entire error object\n      console.log(\"error.response: \", error.response); // Log the response received with the error\n      throw error;\n    }\n  }\n  logout() {\n    localStorage.removeItem(\"user\");\n    sessionStorage.removeItem(\"user\");\n  }\n  async register(firstname, lastname, email, password, phone_number, role, department, birthday, photo) {\n    const response = await axios.post(API_URL + \"register\", {\n      firstname,\n      lastname,\n      email,\n      password,\n      phone_number,\n      role,\n      department,\n      birthday,\n      photo\n    });\n    console.log(response);\n    return response.data;\n  }\n  async sendVerificationCode(email) {\n    console.log(\"Sending verification code for email:\", email);\n    try {\n      const response = await axios.post(API_URL + \"send-email?email=\" + email);\n      console.log(\"Verification code sent to \" + email);\n      return response.data;\n    } catch (error) {\n      console.log(\"An error occurred while sending the verification code.\");\n      console.log(error);\n      throw error;\n    }\n  }\n  async verifyCode(email, code) {\n    console.log(\"Verifying code for email:\", email, \"with code:\", code);\n    try {\n      const response = await axios.post(API_URL + \"verify-code?email=\" + email + \"&code=\" + code);\n      console.log(\"Code verified for email:\", email);\n      return response.data;\n    } catch (error) {\n      console.log(\"An error occurred while verifying the code.\");\n      console.log(error);\n      throw error;\n    }\n  }\n  async resetPassword(email, newPassword, confirmPassword) {\n    console.log(\"Resetting password for email:\", email);\n    try {\n      const response = await axios.post(API_URL + \"reset-password?email=\" + email + \"&newPassword=\" + newPassword + \"&confirmPassword=\" + confirmPassword);\n      console.log(\"Password reset for email:\", email);\n      return response.data;\n    } catch (error) {\n      console.log(\"An error occurred while resetting the password.\");\n      console.log(error);\n      throw error;\n    }\n  }\n  getCurrentUser() {\n    const user = localStorage.getItem('user');\n    if (user) {\n      const parsedUser = JSON.parse(user);\n      return {\n        firstname: parsedUser.firstname,\n        lastname: parsedUser.lastname,\n        email: parsedUser.email,\n        token: parsedUser.token,\n        role: parsedUser.role\n      };\n    }\n    return null;\n  }\n}\nconst authService = new AuthenticationService();\nexport default authService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","AuthenticationService","login","email","password","console","log","response","post","data","token","user","firstname","lastname","role","localStorage","setItem","JSON","stringify","error","logout","removeItem","sessionStorage","register","phone_number","department","birthday","photo","sendVerificationCode","verifyCode","code","resetPassword","newPassword","confirmPassword","getCurrentUser","getItem","parsedUser","parse","authService"],"sources":["/home/rami/Desktop/intership/src/services/AuthenticationService.js"],"sourcesContent":["import axios from \"axios\";\nconst API_URL = process.env.REACT_APP_API_URL + \"/auth/\";\n\nclass AuthenticationService {\n    async login(email, password) {\n      console.log(\"1\"); // Log to indicate that login function has been called\n      try {\n        console.log(\"2\"); // Log to indicate that the try block has been entered\n        console.log(\"email: \", email); // Log the value of email\n        console.log(\"password: \", password); // Log the value of password\n        const response = await axios.post(API_URL + \"login\", {\n          email,\n          password,\n        });\n        console.log(\"3\"); // Log to indicate that the API request has been sent and we are waiting for response\n        console.log(\"response: \", response); // Log the entire response object\n        console.log(\"response.data: \", response.data); // Log the data received in response\n        if (response.data.token) {\n          console.log(response.data.token); // Log the token if it exists\n          const user = {\n            firstname: response.data.firstname,\n            lastname : response.data.lastname,\n            email: response.data.email,\n            token: response.data.token,\n            role: response.data.role}\n          localStorage.setItem(\"user\", JSON.stringify(user));\n        }\n        console.log(\"4\"); // Log to indicate that the login was successful\n        return response.data;\n      } catch (error) {\n        console.log(\"5\"); // Log to indicate that an error occurred\n        console.log(\"error: \", error); // Log the entire error object\n        console.log(\"error.response: \", error.response); // Log the response received with the error\n        throw error;\n      }\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n    sessionStorage.removeItem(\"user\");\n  }\n  \n    async register(firstname, lastname, email, password, phone_number, role, department, birthday, photo) {\n      const response = await axios.post(API_URL + \"register\", {\n        firstname,\n        lastname,\n        email,\n        password,\n        phone_number,\n        role,\n        department,\n        birthday,\n        photo\n      });\n      console.log(response);\n      return response.data;\n    }\n    async sendVerificationCode(email) {\n      console.log(\"Sending verification code for email:\", email); \n      try {\n        const response = await axios.post(API_URL + \"send-email?email=\" + email);\n        console.log(\"Verification code sent to \" + email);\n        return response.data;\n      } catch (error) {\n        console.log(\"An error occurred while sending the verification code.\");\n        console.log(error);\n        throw error;\n      }\n    }\n    async verifyCode(email, code) {\n      console.log(\"Verifying code for email:\", email, \"with code:\", code); \n      try {\n        const response = await axios.post(API_URL + \"verify-code?email=\" + email + \"&code=\" + code);\n        console.log(\"Code verified for email:\", email);\n        return response.data;\n      } catch (error) {\n        console.log(\"An error occurred while verifying the code.\");\n        console.log(error);\n        throw error;\n      }\n    }\n    async resetPassword(email, newPassword, confirmPassword) {\n      console.log(\"Resetting password for email:\", email);\n      try {\n        const response = await axios.post(API_URL + \"reset-password?email=\" + email + \"&newPassword=\" + newPassword +\"&confirmPassword=\" + confirmPassword);\n        console.log(\"Password reset for email:\", email);\n        return response.data;\n      } catch (error) {\n        console.log(\"An error occurred while resetting the password.\");\n        console.log(error);\n        throw error;\n      }\n    }\n\n    getCurrentUser() {\n      const user = localStorage.getItem('user');\n      if (user) {\n        const parsedUser = JSON.parse(user);\n        return {\n          firstname: parsedUser.firstname,\n          lastname: parsedUser.lastname,\n          email: parsedUser.email,\n          token: parsedUser.token,\n          role: parsedUser.role\n\n        };\n      }\n      return null;\n    }\n}\nconst authService = new AuthenticationService();\n\nexport default authService;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
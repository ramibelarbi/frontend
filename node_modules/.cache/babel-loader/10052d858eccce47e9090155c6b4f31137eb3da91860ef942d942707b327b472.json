{"ast":null,"code":"import axios from 'axios';\nimport AuthHeader from './AuthHeader';\nimport authService from './AuthenticationService';\nconst API_URL = process.env.REACT_APP_API_URL;\nclass UserService {\n  getPublicContent() {\n    return axios.get(API_URL + 'all');\n  }\n  getUserBoard() {\n    return axios.get(API_URL + {\n      headers: AuthHeader()\n    });\n  }\n  getAdminBoard() {\n    return axios.get(API_URL + {\n      headers: AuthHeader()\n    });\n  }\n  async addUser(firstname, lastname, email, password, phone_number, role, department, birthday) {\n    const response = await axios.post(API_URL + \"/user\", {\n      firstname,\n      lastname,\n      email,\n      password,\n      phone_number,\n      role,\n      department,\n      birthday\n    });\n    console.log(response);\n    if (response.data.token) {\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\n    }\n    return response.data;\n  }\n  getUserCertificates() {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    return axios.get(API_URL + \"/user/certificates\", config);\n  }\n  async getUserPhoto(email) {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'image/jpeg'\n      },\n      responseType: 'blob'\n    };\n    const response = await axios.get(API_URL + `/user/${email}/photo`, config);\n    return response.data;\n  }\n  getUserProfile(email) {\n    return axios.get(API_URL + `/user/${email}/profile`);\n  }\n  async getUsersByCertificate(certificate) {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.get(API_URL + `/user/search?certificate=` + certificate, config);\n    console.log(response);\n    if (response.status !== 200) {\n      throw new Error(`Failed to get users by certificate: ${response.statusText}`);\n    }\n    const users = response.data;\n    return users;\n  }\n  async addDocument(document) {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const blob = new Blob([document.data], {\n      type: 'application/pdf'\n    });\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const formData = new FormData();\n    formData.append('file', blob, document.name);\n    const response = await axios.post(API_URL + `/user/${currentUser.email}/documents`, formData, config);\n    console.log(response);\n    return response.data;\n  }\n  async deleteDocument(documentId) {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.delete(API_URL + `/user/${currentUser.email}/documents/${documentId}`, config);\n    console.log(response);\n    return response.data;\n  }\n  getUserDocuments() {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    return axios.get(API_URL + \"/user/documents\", config);\n  }\n}\nconst userService = new UserService();\nexport default userService;","map":{"version":3,"names":["axios","AuthHeader","authService","API_URL","process","env","REACT_APP_API_URL","UserService","getPublicContent","get","getUserBoard","headers","getAdminBoard","addUser","firstname","lastname","email","password","phone_number","role","department","birthday","response","post","console","log","data","token","localStorage","setItem","JSON","stringify","getUserCertificates","currentUser","getCurrentUser","config","Authorization","getUserPhoto","Accept","responseType","getUserProfile","getUsersByCertificate","certificate","status","Error","statusText","users","addDocument","document","blob","Blob","type","formData","FormData","append","name","deleteDocument","documentId","delete","getUserDocuments","userService"],"sources":["/home/rami/Desktop/intership/src/services/UserService.js"],"sourcesContent":["import axios from 'axios';\nimport AuthHeader from './AuthHeader';\nimport authService from './AuthenticationService';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nclass UserService {\n  getPublicContent() {\n    return axios.get(API_URL + 'all');\n  }\n\n  getUserBoard() {\n    return axios.get(API_URL + { headers: AuthHeader() });\n  }\n  getAdminBoard() {\n    return axios.get(API_URL +  { headers: AuthHeader() });\n  }\n\n  async addUser(firstname, lastname, email, password, phone_number, role, department, birthday) {\n    const response = await axios.post( API_URL + \"/user\", {\n      firstname,\n      lastname,\n      email,\n      password,\n      phone_number,\n      role,\n      department,\n      birthday\n    });\n    console.log(response);\n    if (response.data.token) {\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\n    }\n    return response.data;\n  }\n  getUserCertificates() {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const config = {\n      headers: { Authorization: `Bearer ${token}` }\n    };\n    return axios.get(API_URL + \"/user/certificates\", config);\n  }\n\n  async getUserPhoto(email) {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'image/jpeg'\n      },\n      responseType: 'blob'\n    };\n    const response = await axios.get(API_URL +`/user/${email}/photo`, config);\n    return response.data;\n  }\n  getUserProfile(email) {\n    return axios.get(API_URL + `/user/${email}/profile`);\n  }\n\n  async getUsersByCertificate(certificate) {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.get(API_URL + `/user/search?certificate=` + certificate, config);\n    console.log(response);\n    if (response.status !== 200) {\n      throw new Error(`Failed to get users by certificate: ${response.statusText}`);\n    }\n    const users = response.data;\n    return users;\n  }\n  async addDocument(document) {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const blob = new Blob([document.data], { type: 'application/pdf' });\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data' \n      }\n    };\n    const formData = new FormData();\n    formData.append('file', blob, document.name); \n    const response = await axios.post(API_URL + `/user/${currentUser.email}/documents`, formData, config);\n    console.log(response);\n    return response.data;\n  }\n  \n  async deleteDocument(documentId) {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.delete(API_URL + `/user/${currentUser.email}/documents/${documentId}`, config);\n    console.log(response);\n    return response.data;\n  }\n  getUserDocuments() {\n    const currentUser = authService.getCurrentUser();\n    const token = currentUser.token;\n    const config = {\n      headers: { Authorization: `Bearer ${token}` }\n    };\n    return axios.get(API_URL + \"/user/documents\", config);\n  }\n\n  \n}\n\nconst userService = new UserService();\n\nexport default userService;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}